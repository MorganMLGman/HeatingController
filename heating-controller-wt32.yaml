substitutions:
  ota_password: "123456789"
  dallas_address_1: "0x5a0922b10b105328"
  dallas_address_2: "0xec0da4d44696c028"

esphome:
  name: heating-controller
  friendly_name: Heating Controller
  name_add_mac_suffix: true
  on_boot:
    - priority: 100
      then:
        - text_sensor.template.publish:
            id: error_text
            state: "No errors"

esp32:
  board: esp32dev
  framework:
    type: esp-idf

packages: 
  wt32_package:
    url: https://github.com/MorganMLGman/ESPHomeBaseFiles
    files:
      - ESP32/wt32_eth1.yaml
    ref: master
    refresh: 0s

http_request:

ota:
  - platform: esphome
    id: ota_esphome
    password: ${ota_password}
  - platform: http_request
    id: ota_http_request

update:
  - platform: http_request
    name: Firmware Update
    source: https://morganmlgman.github.io/HeatingController/firmware/HeatingController.manifest.json

one_wire:
  - platform: gpio
    pin: GPIO15

i2c:
  sda: GPIO33
  scl: GPIO32
  scan: true
  frequency: 400kHz

ads1115:
  - address: 0x48
    continuous_mode: true

globals:
  - id: lockout
    type: bool
    restore_value: false
    initial_value: 'false'

  - id: global_gas_heater_turn_off_delay
    type: float
    restore_value: true
    initial_value: '1.5'
  
  - id: global_gas_heater_turn_off_delay_remaining
    type: int
    restore_value: false
    initial_value: '0'

sensor:
  - platform: dallas_temp
    address: ${dallas_address_1}
    id: 'temp_water_exit'
    name: "Water exit temperature"
    update_interval: 10s
    force_update: True
    filters:
      - throttle_average: 60s

  - platform: dallas_temp
    address: ${dallas_address_2}
    id: 'temp_water_return'
    name: "Water return temperature"
    update_interval: 10s
    force_update: True
    filters:
      - throttle_average: 60s

  - platform: ads1115
    multiplexer: A0_GND
    gain: 6.144
    id: 'adc_voltage'
    name: "ADC Voltage"
    entity_category: diagnostic
    unit_of_measurement: "V"
    icon: "mdi:flash"
    update_interval: 100ms
    filters:
      - offset: -2.5485                       # compensate the offset (calbration)
      - lambda: return x * x;
      - sliding_window_moving_average:
          window_size: 300
          send_every: 50
      - lambda: return sqrt(x);
      - multiply: 338

  - platform: rotary_encoder
    id: encoder1
    pin_a: GPIO39
    pin_b: GPIO36
    filters:
      debounce: 30ms
    on_anticlockwise:
      - display_menu.up:
      - script.execute: return_to_homepage
    on_clockwise:
      - display_menu.down:
      - script.execute: return_to_homepage

binary_sensor:
  - platform: gpio
    id: encoder1_button
    pin:
      number: GPIO35
      inverted: True
    filters:
      - delayed_on: 30ms
      - delayed_off: 30ms
    on_press:
      - if:
          condition:  
            display_menu.is_active:
          then:
            - display_menu.enter:
          else:
            - display_menu.show_main:
            - display_menu.show:

      - script.execute: return_to_homepage

  - platform: template
    id: heat_pump_request
    name: "Heat Pump Request"
    icon: "mdi:flash"
    lambda: |-
      if (id(adc_voltage).state > 150.0) {
        return true;
      } else {
        return false;
      }
    on_press:
      then:
        - switch.turn_on: gas_heater_switch    
  
  - platform: template
    id: problem
    name: "Problem"
    icon: "mdi:alert"
    lambda: |-
      if (id(lockout)) {
        return true;
      } else {
        return false;
      }

text_sensor:
  - platform: template
    id: error_text
    name: Error
    update_interval: never

  - platform: template
    id: remaining_time_text
    name: Remaining Time
    update_interval: 60s
    lambda: |-
      float minutes = id(global_gas_heater_turn_off_delay_remaining) / (1000.0 * 60.0);
      if (id(gas_heater_turn_off_delay_switch).state) {
        return {"OFF in " + str_sprintf("%.0f", minutes) + "min"};
      } else {
        return {"Delay OFF is not active"};
      }

output:
  - platform: gpio
    id: 'output_gas_heater'
    pin:
      number: GPIO5
      inverted: true

  - platform: gpio
    id: 'buzzer'
    pin:
      number: GPIO2


switch:
  - platform: template
    id: gas_heater_switch
    name: "Gas Heater"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - if:
          condition:
            lambda: return !id(lockout);
          then:
            - output.turn_on: output_gas_heater
            - script.execute: gas_heater_turn_off_script
    turn_off_action:
      - output.turn_off: output_gas_heater
    
  - platform: output
    id: buzzer_switch
    internal: true
    output: 'buzzer'
    restore_mode: ALWAYS_OFF

  - platform: template
    name: "Gas Heater Turn Off Delay Activation"
    id: gas_heater_turn_off_delay_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    icon: "mdi:timer"

  - platform: template
    name: "Heat Pump Request Activation"
    id: heat_pump_request_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    icon: "mdi:flash"

number:
  - platform: template
    name: "Gas Heater Turn Off Delay"
    id: gas_heater_turn_off_delay
    min_value: 0
    max_value: 24
    step: 0.25
    icon: "mdi:timer"
    entity_category: config
    optimistic: true
    restore_value: true
    initial_value: 1.5
    on_value:
      then:
        - globals.set:
            id: global_gas_heater_turn_off_delay
            value: !lambda 'return x;'

script:
  - id: return_to_homepage
    mode: restart
    then: 
      - delay: 10s  
      - display_menu.hide:
  
  - id: gas_heater_turn_off_script
    mode: restart
    then:
      - lambda: |-
          if( 0 == id(gas_heater_turn_off_delay_switch).state && 0 == id(heat_pump_request_switch).state) {
            // do nothing
          } 
          else if ( 1 == id(gas_heater_turn_off_delay_switch).state && 0 == id(heat_pump_request_switch).state) {
            id(gas_heater_turn_off_script_delay).execute();
          }
          else if ( 0 == id(gas_heater_turn_off_delay_switch).state && 1 == id(heat_pump_request_switch).state) {
            id(gas_heater_turn_off_script_heat_pump).execute();
          }
          else if ( 1 == id(gas_heater_turn_off_delay_switch).state && 1 == id(heat_pump_request_switch).state) {
            id(gas_heater_turn_off_script_delay_heat_pump).execute();
          }
          else {
            id(gas_heater_switch).turn_off();
            id(lockout) = true;
            id(error_text).publish_state("Error in gas_heater_turn_off_script");
            id(buzzer_switch).turn_on();            
          }

  - id: gas_heater_turn_off_script_delay
    mode: restart
    then:
      - lambda: |-
          id(global_gas_heater_turn_off_delay_remaining) = id(global_gas_heater_turn_off_delay) * 60 * 60 * 1000;
          while (id(global_gas_heater_turn_off_delay_remaining) > 0) {
            id(global_gas_heater_turn_off_delay_remaining) -= 1000;
            delay(1000);
          }
          id(global_gas_heater_turn_off_delay_remaining) = 0;
          id(gas_heater_switch).turn_off();

  - id: gas_heater_turn_off_script_heat_pump
    mode: restart
    then:
      - lambda: |-
          while(id(heat_pump_request).state)
          { 
            id(error_text).publish_state("Waiting for heat pump request to turn off");
            delay(1000);
          }
          id(gas_heater_switch).turn_off();

  - id: gas_heater_turn_off_script_delay_heat_pump
    mode: restart
    then:
      - lambda: |-
          id(global_gas_heater_turn_off_delay_remaining) = id(global_gas_heater_turn_off_delay) * 60 * 60 * 1000;
          while (id(global_gas_heater_turn_off_delay_remaining) > 0) {
            id(global_gas_heater_turn_off_delay_remaining) -= 1000;
            delay(1000);
          }
          id(global_gas_heater_turn_off_delay_remaining) = 0;
          while(id(heat_pump_request).state)
          { 
            id(error_text).publish_state("Waiting for heat pump request to turn off");
            delay(1000);
          }
          id(gas_heater_switch).turn_off();

display:
  - platform: lcd_pcf8574
    id: 'lcd1602'
    dimensions: 16x2
    address: 0x27
    user_characters:
      - position: 0
        data:  # mark_back symbol
          - 0b00100
          - 0b01000
          - 0b11110
          - 0b01001
          - 0b00101
          - 0b00001
          - 0b11110
          - 0b00000
      - position: 1
        data: # arrow up symbol
          - 0b00100
          - 0b01110
          - 0b10101
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b00100
      - position: 2
        data: # arrow down symbol
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b00100
          - 0b10101
          - 0b01110
          - 0b00100

    lambda: |-
      id(heating_controller_menu).draw();
      if (!id(heating_controller_menu).is_active()) {
        it.printf(0, 0, "\x01: %4.1f", id(temp_water_exit).state);
        it.printf(0, 8, "\x02: %4.1f", id(temp_water_return).state);
      }

lcd_menu:
  id: heating_controller_menu
  display_id: 'lcd1602'
  active: true
  mode: rotary
  mark_back: 0x08
  mark_selected: 0x3e
  mark_editing: 0x2a
  mark_submenu: 0x7e

  items:
    - type: command
      text: 0x08
      on_value:
        then:
          - display_menu.hide:

    - type: switch
      text: "Gas Heater"
      switch: gas_heater_switch
      immediate_edit: false
      on_text: "ON"
      off_text: "OFF"

    - type: switch
      text: "Auto OFF"
      switch: gas_heater_turn_off_delay_switch
      immediate_edit: false
      on_text: "ON"
      off_text: "OFF"

    - type: number
      text: "OFF Delay"
      number: gas_heater_turn_off_delay
      immediate_edit: true
      format: "%5.2f"

    - type: switch
      text: "Heat Pump"
      switch: heat_pump_request_switch
      immediate_edit: false
      on_text: "ON"
      off_text: "OFF"

    - type: command
      text: "Restart"
      on_value:
        then:
          - button.press: restart_button_0

